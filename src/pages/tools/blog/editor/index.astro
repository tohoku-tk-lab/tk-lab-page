---
import EditorLayout from '@layouts/EditorLayout.astro';
import MarkdownStyles from '../../../../remark/MarkdownStyles.astro';
import { DEFAULT_GITHUB_ICONS } from '../../../../remark/icons.ts';
---

<EditorLayout
  title="Markdown Blog Editor"
  description="リアルタイムでMarkdownをプレビューしながら編集できるエディターです"
>
  <MarkdownStyles />

  <style>
    /* Tag button and selected tag styling */
    .tag-button,
    .selected-tag {
      transition: all 0.2s ease-in-out;
      cursor: pointer;
    }
    .tag-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .selected-tag {
      display: inline-flex;
      align-items: center;
      background-color: #e0e7ff;
      color: #4338ca;
      padding: 4px 8px;
      border-radius: 9999px;
      font-size: 0.875rem;
      font-weight: 500;
    }
    .selected-tag .remove-tag {
      margin-left: 6px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background-color: #c7d2fe;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    .selected-tag .remove-tag:hover {
      background-color: #a5b4fc;
      color: #fff;
    }
  </style>

  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="mb-2 text-3xl font-bold text-gray-900">
          Markdown Blog Editor
        </h1>
        <p class="text-gray-600">
          リアルタイムでMarkdownをプレビューしながら編集できるエディターです
        </p>
        <p class="text-gray-600">
          マークダウンでのブログの書き方については
          <a
            href="/blogs/dev/markdown-cheatsheet/blog/"
            target="_blank"
            rel="noopener noreferrer"
            class="text-blue-500 hover:underline"
            >研究室ブログで利用できるマークダウンチートシート</a
          >
          を参考にしてください
        </p>
      </div>

      <!-- フロントマター入力フォーム -->
      <div class="mb-6 rounded-lg bg-white p-6 shadow-sm">
        <h2 class="mb-4 text-xl font-semibold">記事情報</h2>
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          <div>
            <label class="mb-1 block text-sm font-medium text-gray-700"
              >タイトル</label
            >
            <input
              type="text"
              id="title"
              class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="記事のタイトル"
            />
          </div>
          <div>
            <label class="mb-1 block text-sm font-medium text-gray-700"
              >日付</label
            >
            <input
              type="date"
              id="date"
              class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
        <div class="mt-4">
          <label class="mb-1 block text-sm font-medium text-gray-700"
            >リード文</label
          >
          <textarea
            id="lead"
            rows="2"
            class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="記事の概要（省略可）"></textarea>
        </div>
        <div class="mt-4">
          <label class="mb-2 block text-sm font-medium text-gray-700"
            >タグ（最大5個）</label
          >
          <div class="mb-3">
            <h3 class="mb-2 text-sm font-medium text-gray-600">
              よく使われるタグ:
            </h3>
            <div class="flex flex-wrap gap-2" id="predefinedTags">
              <button type="button" class="tag-button" data-tag="blog"
                >blog</button
              >
              <button type="button" class="tag-button" data-tag="event"
                >event</button
              >
              <button type="button" class="tag-button" data-tag="monthly"
                >monthly</button
              >
              <button type="button" class="tag-button" data-tag="tips"
                >tips</button
              >
              <button type="button" class="tag-button" data-tag="info"
                >info</button
              >
              <button type="button" class="tag-button" data-tag="news"
                >news</button
              >
            </div>
          </div>
          <div class="mb-2 flex gap-2">
            <input
              type="text"
              id="customTag"
              class="flex-1 rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="カスタムタグを入力..."
            />
            <button
              type="button"
              id="addCustomTag"
              class="inline-flex items-center gap-2 rounded-md bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600 active:bg-blue-700"
            >
              <Fragment set:html={DEFAULT_GITHUB_ICONS.plus} />
              追加
            </button>
          </div>
          <div class="selected-tags pt-2">
            <h3 class="mb-2 text-sm font-medium text-gray-600">
              選択されたタグ:
            </h3>
            <div class="flex min-h-[40px] flex-wrap gap-2" id="selectedTags">
              <!-- 選択されたタグがここに表示される -->
            </div>
          </div>
        </div>
      </div>

      <!-- エディターとプレビュー -->
      <div class="editor-container rounded-lg bg-white shadow-sm">
        <div class="flex h-full flex-col md:flex-row">
          <!-- プレビュー（左側） -->
          <div
            class="flex h-full w-full flex-col border-r border-gray-200 p-6 lg:w-1/2"
          >
            <div class="mb-4 flex items-center justify-between">
              <h2 class="text-xl font-semibold">プレビュー</h2>
              <div class="flex items-center gap-2">
                <button
                  id="downloadBtn"
                  class="inline-flex items-center gap-2 rounded-md bg-green-500 px-4 py-2 text-white transition-colors hover:bg-green-600 active:bg-green-700"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.download} />
                  .md ダウンロード
                </button>
                <button
                  id="saveBtn"
                  class="inline-flex items-center gap-2 rounded-md bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600 active:bg-blue-700"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.cache} />
                  一時保存
                </button>
                <button
                  id="loadBtn"
                  class="inline-flex items-center gap-2 rounded-md bg-purple-500 px-4 py-2 text-white transition-colors hover:bg-purple-600 active:bg-purple-700"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.repo_pull} />
                  .md インポート
                </button>
              </div>
            </div>
            <div
              class="flex-grow overflow-y-auto rounded-lg border border-gray-200 bg-gray-50 p-4"
            >
              <article id="preview" class="markdown-body prose max-w-none">
                <p class="italic text-gray-500">
                  プレビューがここに表示されます...
                </p>
              </article>
            </div>
          </div>

          <!-- エディター（右側） -->
          <div class="flex w-full flex-col p-6 lg:w-1/2">
            <div class="mb-4 flex items-center justify-between">
              <h2 class="text-xl font-semibold">Markdownエディター</h2>
              <div class="flex items-center gap-2">
                <input type="file" id="fileInput" accept=".md" class="hidden" />
                <!-- .mdファイル読込ボタンはプレビュー側に移動済み -->
              </div>
            </div>
            <!-- テキストエリアとハイライトのコンテナ -->
            <div class="relative flex-grow">
              <textarea
                id="markdownEditor"
                class="absolute left-0 top-0 h-full w-full resize-none rounded-lg border border-gray-300 bg-transparent p-4 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                style="z-index: 1"
                placeholder="Markdownを入力してください..."></textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- 自動保存ステータス -->
      <div class="mt-4 flex items-center justify-between text-sm text-gray-500">
        <span id="autoSaveStatus">自動保存: 未保存</span>
        <span>最終更新: <span id="lastUpdate">未更新</span></span>
      </div>
    </div>
  </div>

  <script>
    // 分割されたTypeScriptファイルから機能をインポート
    import {
      TagManager,
      LocalStorageManager,
      updatePreview
    } from '../../../../remark/markdown-editor.ts';

    import {
      UIManager,
      EventHandlerManager
    } from '../../../../remark/ui-manager.ts';

    import { initializeEditor } from '../../../../remark/editor-initializer.ts';

    // DOM要素をキャッシュ
    let cachedPreviewElement: HTMLElement | null = null;

    // コードブロックのスタイルを動的に適用する関数
    function applyCodeBlockStyles() {
      // プレビュー要素をキャッシュして再利用
      if (!cachedPreviewElement) {
        cachedPreviewElement = document.getElementById('preview');
      }

      if (cachedPreviewElement) {
        const codeBlocks = cachedPreviewElement.querySelectorAll('pre code');
        codeBlocks.forEach((codeBlock) => {
          const element = codeBlock as HTMLElement;
          element.style.backgroundColor = '#000000';
          element.style.color = '#ffffff';
          element.style.borderRadius = '0.375rem';
          element.style.display = 'block';
          element.style.overflowX = 'auto';
          element.style.lineHeight = '1.5';
        });

        const preElements = cachedPreviewElement.querySelectorAll('pre');
        preElements.forEach((pre) => {
          const element = pre as HTMLElement;
          element.style.backgroundColor = '#000000';
          element.style.borderRadius = '0.375rem';
          element.style.padding = '1rem';
          element.style.margin = '1rem 0';
          element.style.overflowX = 'auto';
        });
      }
    }

    // エディターの初期化
    document.addEventListener('DOMContentLoaded', () => {
      // インスタンスの生成
      const uiManager = new UIManager();
      const tagManager = new TagManager();
      const localStorageManager = new LocalStorageManager();

      // イベントハンドラーを初期化
      const eventHandlerManager = new EventHandlerManager(
        uiManager,
        tagManager,
        localStorageManager,
        updatePreview
      );

      // プレビュー更新時にスタイルを自動適用するよう拡張
      const originalUpdatePreview = uiManager.updatePreview;
      uiManager.updatePreview = function (html) {
        originalUpdatePreview.call(this, html);
        // DOMが更新された後にスタイルを適用
        requestAnimationFrame(() => applyCodeBlockStyles());
      };

      // エディターを初期化（初期プレビューはupdatePreview経由で実行される）
      initializeEditor(
        uiManager,
        tagManager,
        localStorageManager,
        eventHandlerManager,
        updatePreview
      );
    });
  </script>
</EditorLayout>
