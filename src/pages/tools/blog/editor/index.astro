---
import EditorLayout from '@layouts/EditorLayout.astro';
import MarkdownStyles from '../../../../remark/MarkdownStyles.astro';
import { DEFAULT_GITHUB_ICONS } from '../../../../remark/icons.ts';

// よく使われるタグの定数
const COMMON_TAGS = [
  'blog',
  'event',
  'monthly',
  'tips',
  'info',
  'news'
] as const;
---

<EditorLayout
  title="Markdown Blog Editor"
  description="リアルタイムでMarkdownをプレビューしながら編集できるエディターです"
>
  <MarkdownStyles />

  <style>
    /* Tag button and selected tag styling */
    .tag-button,
    .selected-tag {
      transition: all 0.2s ease-in-out;
      cursor: pointer;
    }
    .tag-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .selected-tag {
      display: inline-flex;
      align-items: center;
      background-color: #e0e7ff;
      color: #4338ca;
      padding: 4px 8px;
      border-radius: 9999px;
      font-size: 0.875rem;
      font-weight: 500;
    }
    .selected-tag .remove-tag {
      margin-left: 6px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background-color: #c7d2fe;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    .selected-tag .remove-tag:hover {
      background-color: #a5b4fc;
      color: #fff;
    }

    /* 編集用ボタンのスタイル */
    .edit-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      padding: 6px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      background-color: #ffffff;
      color: #374151;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease-in-out;
    }

    .edit-button:hover {
      background-color: #f3f4f6;
      border-color: #9ca3af;
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .edit-button:active {
      transform: translateY(0);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .edit-button svg {
      width: 16px;
      height: 16px;
    }
  </style>

  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="mb-2 text-3xl font-bold text-gray-900">
          Markdown Blog Editor
        </h1>
        <p class="text-gray-600">
          リアルタイムでMarkdownをプレビューしながら編集できるエディターです
        </p>
        <p class="text-gray-600">
          マークダウンでのブログの書き方については
          <a
            href="/blogs/dev/markdown-cheatsheet/blog/"
            target="_blank"
            rel="noopener noreferrer"
            class="text-blue-500 hover:underline"
            >研究室ブログで利用できるマークダウンチートシート</a
          >
          を参考にしてください
        </p>
      </div>

      <!-- フロントマター入力フォーム -->
      <div class="mb-6 rounded-lg bg-white p-6 shadow-sm">
        <h2 class="mb-4 text-xl font-semibold">記事情報</h2>
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          <div>
            <label class="mb-1 block text-sm font-medium text-gray-700"
              >タイトル</label
            >
            <input
              type="text"
              id="title"
              class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="記事のタイトル"
            />
          </div>
          <div>
            <label class="mb-1 block text-sm font-medium text-gray-700"
              >日付</label
            >
            <input
              type="date"
              id="date"
              class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
        <div class="mt-4">
          <label class="mb-1 block text-sm font-medium text-gray-700"
            >リード文</label
          >
          <textarea
            id="lead"
            rows="2"
            class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="記事の概要（省略可）"></textarea>
        </div>
        <div class="mt-4">
          <label class="mb-2 block text-sm font-medium text-gray-700"
            >タグ（最大5個）</label
          >
          <div class="mb-3">
            <h3 class="mb-2 text-sm font-medium text-gray-600">
              よく使われるタグ:
            </h3>
            <div class="flex flex-wrap gap-2" id="predefinedTags">
              {
                COMMON_TAGS.map((tag) => (
                  <button type="button" class="tag-button" data-tag={tag}>
                    {tag}
                  </button>
                ))
              }
            </div>
          </div>
          <div class="mb-2 flex gap-2">
            <input
              type="text"
              id="customTag"
              class="flex-1 rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="カスタムタグを入力..."
            />
            <button
              type="button"
              id="addCustomTag"
              class="inline-flex items-center gap-2 rounded-md bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600 active:bg-blue-700"
            >
              <Fragment set:html={DEFAULT_GITHUB_ICONS.plus} />
              追加
            </button>
          </div>
          <div class="selected-tags pt-2">
            <h3 class="mb-2 text-sm font-medium text-gray-600">
              選択されたタグ:
            </h3>
            <div class="flex min-h-[40px] flex-wrap gap-2" id="selectedTags">
              <!-- 選択されたタグがここに表示される -->
            </div>
          </div>
        </div>
      </div>

      <!-- エディターとプレビュー -->
      <div class="editor-container rounded-lg bg-white shadow-sm">
        <div class="flex h-full flex-col md:flex-row">
          <!-- プレビュー（左側） -->
          <div
            class="flex h-full w-full flex-col border-r border-gray-200 p-6 lg:w-1/2"
          >
            <div class="mb-4 flex items-center justify-between">
              <h2 class="text-xl font-semibold">プレビュー</h2>
              <div class="flex items-center gap-2">
                <button
                  id="downloadBtn"
                  class="inline-flex items-center gap-2 rounded-md bg-green-500 px-4 py-2 text-white transition-colors hover:bg-green-600 active:bg-green-700"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.download} />
                  .zip ダウンロード
                </button>
                <button
                  id="saveBtn"
                  class="inline-flex items-center gap-2 rounded-md bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600 active:bg-blue-700"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.cache} />
                  一時保存
                </button>
                <button
                  id="loadBtn"
                  class="inline-flex items-center gap-2 rounded-md bg-purple-500 px-4 py-2 text-white transition-colors hover:bg-purple-600 active:bg-purple-700"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.repo_pull} />
                  .md インポート
                </button>
              </div>
            </div>
            <div
              class="flex-grow overflow-y-auto rounded-lg border border-gray-200 bg-gray-50 p-4"
            >
              <article id="preview" class="markdown-body prose max-w-none">
                <p class="italic text-gray-500">
                  プレビューがここに表示されます...
                </p>
              </article>
            </div>
          </div>

          <!-- エディター（右側） -->
          <div class="flex w-full flex-col p-6 lg:w-1/2">
            <div class="mb-4 flex items-center justify-between">
              <h2 class="text-xl font-semibold">Markdownエディター</h2>
              <div class="flex items-center gap-2">
                <input type="file" id="fileInput" accept=".md" class="hidden" />
                <input
                  type="file"
                  id="imageInput"
                  accept=".jpg,.jpeg,.png,.webp,.heic"
                  class="hidden"
                />
              </div>
            </div>

            <!-- 編集用ボタンエリア -->
            <div class="mb-4 rounded-lg border border-gray-200 bg-gray-50 p-3">
              <div class="flex flex-wrap gap-2">
                <!-- 画像ボタン -->
                <button
                  type="button"
                  class="edit-button"
                  data-action="image"
                  title="画像挿入"
                >
                  <Fragment set:html={DEFAULT_GITHUB_ICONS.image} />
                </button>
              </div>
            </div>

            <!-- テキストエリアとハイライトのコンテナ -->
            <div class="relative flex-grow">
              <textarea
                id="markdownEditor"
                class="absolute left-0 top-0 h-full w-full resize-none rounded-lg border border-gray-300 bg-transparent p-4 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                style="z-index: 1"
                placeholder="Markdownを入力してください..."></textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- 自動保存ステータス -->
      <div class="mt-4 flex items-center justify-between text-sm text-gray-500">
        <span id="autoSaveStatus">自動保存: 未保存</span>
        <span>最終更新: <span id="lastUpdate">未更新</span></span>
      </div>
    </div>
  </div>

  <script>
    // 分割されたTypeScriptファイルから機能をインポート
    import {
      TagManager,
      LocalStorageManager,
      updatePreviewWithImages,
      ImageManager
    } from '../../../../remark/markdown-editor.ts';

    import {
      UIManager,
      EventHandlerManager
    } from '../../../../remark/ui-manager.ts';

    import { initializeEditor } from '../../../../remark/editor-initializer.ts';

    // 定数定義
    const MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB

    // DOM要素をキャッシュ
    let cachedPreviewElement: HTMLElement | null = null;

    // カーソル位置にテキストを挿入する関数
    function insertTextAtCursor(
      textarea: HTMLTextAreaElement,
      text: string
    ): void {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const before = textarea.value.substring(0, start);
      const after = textarea.value.substring(end);

      textarea.value = before + text + after;

      // カーソル位置を挿入したテキストの後に移動
      const newPosition = start + text.length;
      textarea.setSelectionRange(newPosition, newPosition);

      // テキストエリアにフォーカス
      textarea.focus();

      // 変更イベントを発火してプレビューを更新
      textarea.dispatchEvent(new Event('input', { bubbles: true }));
    }

    // ローカル画像パスを解決する関数
    function resolveLocalImages(imageManager: ImageManager): void {
      const previewElement = document.getElementById('preview');
      if (!previewElement) {
        return;
      }

      const images = previewElement.querySelectorAll('img');

      images.forEach((img) => {
        const src = img.getAttribute('src');

        if (src && src.startsWith('./')) {
          const imageName = src.substring(2); // './' を除去
          const imageData = imageManager.getImageDataByName(imageName);

          if (imageData) {
            img.setAttribute('src', imageData);
            img.setAttribute('data-original-src', src);
          } else {
            // 画像が見つからない場合の処理
            img.setAttribute('alt', `画像が見つかりません: ${imageName}`);
            img.style.backgroundColor = '#f3f4f6';
            img.style.border = '2px dashed #d1d5db';
            img.style.padding = '20px';
            img.style.display = 'inline-block';
            img.style.minWidth = '200px';
            img.style.minHeight = '100px';
          }
        }
      });
    }

    // プレビュー更新時にローカル画像を解決する関数
    function updatePreviewWithLocalImages(
      markdownText: string,
      imageManager: ImageManager,
      updatePreviewFn: (text: string) => void
    ): void {
      // 通常のプレビュー更新
      updatePreviewFn(markdownText);

      // MutationObserverを使用してDOM更新を監視
      const previewElement = document.getElementById('preview');
      if (previewElement) {
        const observer = new MutationObserver(() => {
          resolveLocalImages(imageManager);
          observer.disconnect();
        });
        observer.observe(previewElement, { childList: true, subtree: true });
      }
    }

    // コードブロックのスタイルを動的に適用する関数
    function applyCodeBlockStyles() {
      // プレビュー要素をキャッシュして再利用
      if (!cachedPreviewElement) {
        cachedPreviewElement = document.getElementById('preview');
      }

      if (cachedPreviewElement) {
        const codeBlocks = cachedPreviewElement.querySelectorAll('pre code');
        codeBlocks.forEach((codeBlock) => {
          const element = codeBlock as HTMLElement;
          element.style.backgroundColor = '#000000';
          element.style.color = '#ffffff';
          element.style.borderRadius = '0.375rem';
          element.style.display = 'block';
          element.style.overflowX = 'auto';
          element.style.lineHeight = '1.5';
        });

        const preElements = cachedPreviewElement.querySelectorAll('pre');
        preElements.forEach((pre) => {
          const element = pre as HTMLElement;
          element.style.backgroundColor = '#000000';
          element.style.borderRadius = '0.375rem';
          element.style.padding = '1rem';
          element.style.margin = '1rem 0';
          element.style.overflowX = 'auto';
        });
      }
    }

    // エディターの初期化
    document.addEventListener('DOMContentLoaded', () => {
      // インスタンスの生成
      const uiManager = new UIManager();
      const tagManager = new TagManager();
      const localStorageManager = new LocalStorageManager();
      const imageManager = new ImageManager();

      // 統合されたプレビュー更新関数（markdown-editor.tsの関数をラップ）
      const enhancedUpdatePreview = (markdown: string): string => {
        const editorElement = document.getElementById(
          'markdownEditor'
        ) as HTMLTextAreaElement;
        const actualMarkdown = editorElement ? editorElement.value : markdown;

        // markdown-editor.tsの画像処理機能付き関数を使用
        const processedHtml = updatePreviewWithImages(
          actualMarkdown,
          imageManager
        );

        const previewElement = document.getElementById('preview');
        if (previewElement) {
          previewElement.innerHTML = processedHtml;
          applyCodeBlockStyles();
        }

        return processedHtml;
      };

      // EventHandlerManager用のラッパー関数（戻り値がstringである必要がある）
      const updatePreviewForEventHandler = (markdown: string): string => {
        return enhancedUpdatePreview(markdown);
      };

      // uiManagerのupdatePreviewを置き換え（初期化前に実行）
      uiManager.updatePreview = enhancedUpdatePreview;

      // イベントハンドラーを初期化
      const eventHandlerManager = new EventHandlerManager(
        uiManager,
        tagManager,
        localStorageManager,
        updatePreviewForEventHandler
      );

      // 画像挿入ボタンのイベントハンドラー
      const imageButton = document.querySelector(
        '[data-action="image"]'
      ) as HTMLButtonElement;
      const imageInput = document.getElementById(
        'imageInput'
      ) as HTMLInputElement;
      const markdownEditor = document.getElementById(
        'markdownEditor'
      ) as HTMLTextAreaElement;

      if (imageButton && imageInput && markdownEditor) {
        // 画像挿入ボタンがクリックされたときの処理
        imageButton.addEventListener('click', () => {
          imageInput.click();
        });

        // ファイルが選択されたときの処理
        imageInput.addEventListener('change', async (event) => {
          const target = event.target as HTMLInputElement;
          const file = target.files?.[0];

          if (file) {
            if (file.size > MAX_IMAGE_SIZE) {
              alert(
                `画像サイズは10MB以下にしてください。\n選択されたファイル: ${(file.size / 1024 / 1024).toFixed(1)}MB`
              );
              return;
            }
            try {
              // ローディング状態を表示（オプション）
              imageButton.disabled = true;

              // 画像を処理してローカルストレージに保存
              const { imageName, imageKey } =
                await imageManager.saveImage(file);

              // Markdown記法をカーソル位置に挿入
              const markdownText = `![${imageName}](./${imageName} '${imageName}')`;
              insertTextAtCursor(markdownEditor, markdownText);
            } catch (error) {
              console.error('画像の処理中にエラーが発生しました:', error);
              alert(
                '画像の処理中にエラーが発生しました。サポートされているファイル形式（JPG、PNG、WebP、HEIC）を選択してください。'
              );
            } finally {
              // ボタンの状態をリセット
              imageButton.disabled = false;

              // ファイル入力をリセット
              imageInput.value = '';
            }
          }
        });
      }

      // エディターのinputイベントを直接監視
      const editorElement = document.getElementById(
        'markdownEditor'
      ) as HTMLTextAreaElement;
      if (editorElement) {
        editorElement.addEventListener('input', () => {
          enhancedUpdatePreview(editorElement.value);
        });
      }

      // エディターを初期化（初期プレビューはenhancedUpdatePreview経由で実行される）
      initializeEditor(
        uiManager,
        tagManager,
        localStorageManager,
        eventHandlerManager,
        enhancedUpdatePreview
      );
    });
  </script>
</EditorLayout>
